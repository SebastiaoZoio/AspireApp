@page "/collaborators"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject Services.CollaboratorService CollaboratorService
@using Services.Models
@using Services.Requests

<PageTitle>Colaboradores</PageTitle>

<h1>Colaboradores</h1>

@* @if (collaborators == null)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" />
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>IsActive</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var collaborator in collaborators)
            {
                <tr>
                    <td>@collaborator.Name</td>
                    <td>@collaborator.IsActive</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveEmployee(collaborator.Id)">Remover</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Add Employee</h4>
<div>
    <input type="text" @bind="newCollaborator.Name" placeholder="Name" />
        <button class="btn btn-primary" @onclick="async () => await AddCollaborator()">Adicionar</button>
</div>

} *@


<Grid TItem="Collaborator"
      Class="table table-hover table-bordered table-striped"
      DataProvider="ListCollaborators"

      AllowFiltering="true"
      AllowPaging="true"
      AllowSorting="true"
      Responsive="true">


    <GridColumn TItem="Collaborator" HeaderText="Name" PropertyName="Name" SortString="Name" SortKeySelector="item => item.Name" FilterTextboxWidth="80">
        @context.Name
    </GridColumn>
    <GridColumn TItem="Collaborator" HeaderText="IsActive" PropertyName="IsActive" SortString="IsActive" Sortable="false" FilterTextboxWidth="50">
        @context.IsActive
    </GridColumn>

</Grid>

@code {
    // private IEnumerable<Collaborator> collaborators = null; //new List<Collaborator>();
    // private Collaborator newCollaborator = new Collaborator();

    protected override async Task OnInitializedAsync()
    {
        await LoadCollaborators();
    }

    private async Task LoadCollaborators()
    {
        //collaborators = await CollaboratorService.GetCollaboratorsAsync();

        await ListCollaborators(new GridDataProviderRequest<Collaborator>()
        {
            PageNumber = 1,
            PageSize = 10
        });
        StateHasChanged();
    }

    private async Task<GridDataProviderResult<Collaborator>> ListCollaborators(GridDataProviderRequest<Collaborator> request)
    {
        string sortString = "";
        SortDirection sortDirection = SortDirection.None;

        if (request.Sorting is not null && request.Sorting.Any())
        {
            // Note: Multi column sorting is not supported at this moment
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }

        var listCollaboratorsRequest = new ListCollaboratorsRequest()
        {
            Filters = request.Filters,
            PageNumber = request.PageNumber,
            PageSize = request.PageSize,
            SortString = sortString,
            SortDirection = sortDirection,
        };

        var result = await CollaboratorService.ListCollaboratorsAsync(listCollaboratorsRequest);
        return await Task.FromResult(new GridDataProviderResult<Collaborator> { Data = result.Item1, TotalCount = result.Item2 });
    }

    // private async Task AddCollaborator()
    // {
    //     var response = await CollaboratorService.AddCollaboratorAsync(newCollaborator);
    //     if (response.IsSuccessStatusCode)
    //     {
    //         collaborators.Add(newCollaborator); // Reload the list of employees
    //         newCollaborator = new Collaborator(); // Reset the new employee form

    //     }
    //     else
    //     {
    //         // Handle error
    //     }
    // }

    // private async Task RemoveEmployee(Guid collaboratorId)
    // {
    //     var response = await CollaboratorService.RemoveCollaboratorAsync(collaboratorId); 
    //     if (response.IsSuccessStatusCode)
    //     {
    //         collaborators.Remove(collaborators.FirstOrDefault(c => c.Id == collaboratorId));  // Reload the list of employees
    //     }
    //     else
    //     {
    //         // Handle error
    //     }
    // }
}