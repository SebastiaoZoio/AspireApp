@page "/collaborators"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject Services.CollaboratorService CollaboratorService
@using Services.Models

<PageTitle>Colaboradores</PageTitle>

<h1>Colaboradores</h1>

@if (collaborators == null)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" />
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>IsActive</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var collaborator in collaborators)
            {
                <tr>
                    <td>@collaborator.Name</td>
                    <td>@collaborator.IsActive</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveEmployee(collaborator.Id)">Remover</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Add Employee</h4>
<div>
    <input type="text" @bind="newCollaborator.Name" placeholder="Name" />
        <button class="btn btn-primary" @onclick="async () => await AddCollaborator()">Adicionar</button>
</div>

}

@code {
    private List<Collaborator> collaborators = null; //new List<Collaborator>();
    private Collaborator newCollaborator = new Collaborator();

    protected override async Task OnInitializedAsync()
    {
        await LoadCollaborators();
    }

    private async Task LoadCollaborators()
    {
        collaborators = await CollaboratorService.GetCollaboratorsAsync();
    }

    private async Task AddCollaborator()
    {
        var response = await CollaboratorService.AddCollaboratorAsync(newCollaborator);
        if (response.IsSuccessStatusCode)
        {
            collaborators.Add(newCollaborator); // Reload the list of employees
            newCollaborator = new Collaborator(); // Reset the new employee form

        }
        else
        {
            // Handle error
        }
    }

    private async Task RemoveEmployee(Guid collaboratorId)
    {
        var response = await CollaboratorService.RemoveCollaboratorAsync(collaboratorId); 
        if (response.IsSuccessStatusCode)
        {
            collaborators.Remove(collaborators.FirstOrDefault(c => c.Id == collaboratorId));  // Reload the list of employees
        }
        else
        {
            // Handle error
        }
    }
}