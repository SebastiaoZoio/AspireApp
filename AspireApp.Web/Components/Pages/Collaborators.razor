@page "/collaborators"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject Services.CollaboratorService CollaboratorService
@using Services.Models
@using Services.Requests

<div class="container-fluid">
    <div class="row">
        <div class="col-6">            
            <Card class="mt-4">
                <CardBody>                    
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <CardTitle>Colaboradores</CardTitle>
                        <div>
                            <Button Color="ButtonColor.Primary" @onclick="OnShowNewCollaboratorModalClick" Type="BlazorBootstrap.ButtonType.Link" Disabled="isLoading">Adicionar Colaborador</Button>
                            <Button Color="ButtonColor.Danger" @onclick="ShowConfirmationAsync" Type="BlazorBootstrap.ButtonType.Link" Disabled="selectedCollaborators.Count == 0">Eliminar</Button>
                        </div>                        
                    </div>
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center mt-4 mb-4">
                            <Spinner Type="SpinnerType.Border" />
                        </div>
                    }
                    <Grid Id="collaboratorsGrid" @ref="collaboratorsGridRef" TItem="Collaborator"
                          Class="table table-hover table-bordered"
                          DataProvider="ListCollaborators"
                          EmptyText="Não existem colaboradores"
                          FiltersTranslationProvider="GridFiltersTranslationProvider"
                          AllowFiltering="true"
                          AllowPaging="true"
                          AllowSorting="true"
                          AllowSelection="true"
                          SelectionMode="GridSelectionMode.Multiple"
                          SelectedItemsChanged="OnSelectedItemsChanged"
                          Responsive="true">

                        <GridColumn TItem="Collaborator" HeaderText="Nome" PropertyName="Name" SortString="Name" SortKeySelector="item => item.Name" FilterTextboxWidth="60">
                            @context.Name
                        </GridColumn>
                        <GridColumn TItem="Collaborator" HeaderText="Ativo" PropertyName="IsActive" Sortable="false" Filterable="false">
                            @context.IsActive
                        </GridColumn>
                    </Grid>
                </CardBody>
            </Card>
        </div>
        <div class="col-6">
            <Card class="mt-4">
                <CardBody>  
                    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                        TextProperty="Text" SelectedIndex="1"
                        SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender MonthSelect=@OnMonthSelect>
                        <RadzenMonthView />

                        <RadzenYearView />
                    </RadzenScheduler>

                </CardBody>
            </Card>
        </div>
    </div>
</div>

<Modal @ref="modalNewCollaborator" Title="Adicionar colaborador" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="mb-3">
            <label for="collaboratorName">Nome:</label>
            <InputText id="newCollaboratorName"
                       @bind-Value="newCollaboratorName"
                       placeholder="João Silva"
                       class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideNewCollaboratorModalClick">Cancelar</Button>
        <Button Color="ButtonColor.Primary" Disabled="string.IsNullOrEmpty(newCollaboratorName)" @onclick="AddCollaborator">Adicionar</Button>
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="removeCollaboratorsDialog" />

<Toasts class="p-3" Messages="toastMessages" AutoHide="true" Placement="ToastsPlacement.TopCenter" />


@code {
    
    List<ToastMessage> toastMessages = new List<ToastMessage>();
    private bool isLoading = true;

    //collaborator variables
    private Grid<Collaborator>? collaboratorsGridRef;
    private ConfirmDialog removeCollaboratorsDialog = default!;        
    private Modal modalNewCollaborator = new();
    private string newCollaboratorName = "";
    private HashSet<Collaborator> selectedCollaborators = new();

    //scheduler variables
    RadzenScheduler<Appointment> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>
    {
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCollaborators();
        isLoading = false;
    }

    private async Task LoadCollaborators()
    {
        await ListCollaborators(new GridDataProviderRequest<Collaborator>()
        {
            PageNumber = 1,
            PageSize = 10
        });
        StateHasChanged();
    }

    private async Task<GridDataProviderResult<Collaborator>> ListCollaborators(GridDataProviderRequest<Collaborator> request)
    {
        string sortString = "";
        SortDirection sortDirection = SortDirection.None;

        if (request.Sorting is not null && request.Sorting.Any())
        {
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }

        var listCollaboratorsRequest = new ListCollaboratorsRequest()
        {
            Filters = request.Filters,
            PageNumber = request.PageNumber,
            PageSize = request.PageSize,
            SortString = sortString,
            SortDirection = sortDirection,
        };

        var result = await CollaboratorService.ListCollaboratorsAsync(listCollaboratorsRequest);
        return await Task.FromResult(new GridDataProviderResult<Collaborator> { Data = result.Item1, TotalCount = result.Item2 });
    }

    private async Task AddCollaborator()
    {
        if (!string.IsNullOrWhiteSpace(newCollaboratorName))
        {
            var newCollaboratorRequest = new NewCollaboratorRequest()
                {
                    Name = newCollaboratorName
                };

            var response = await CollaboratorService.AddCollaboratorAsync(newCollaboratorRequest);
            if (response.IsSuccessStatusCode)
            {
                ShowToast(ToastType.Success, "Novo Colaborador", "Novo colaborador adicionado com sucesso!");
                await LoadCollaborators();
                await collaboratorsGridRef.RefreshDataAsync();
                await OnHideNewCollaboratorModalClick();
            }
            else
            {
                ShowToast(ToastType.Danger, "Novo Colaborador", "Erro a adicionar novo colaborador");
            }
        }        
    }

    private async Task RemoveCollaborators()
    {
        var request = new DeleteCollaboratorsRequest
            {
                collaborators = selectedCollaborators.ToList<Collaborator>()
            };

        var response = await CollaboratorService.RemoveCollaboratorsAsync(request);

        if (response.Success)
        {
            ShowToast(ToastType.Success, "Remove Collaborators", "Collaborators removed successfully.");
            await LoadCollaborators();
            await collaboratorsGridRef.RefreshDataAsync();
            selectedCollaborators = new();
        }
        else
        {
            //ShowToast(ToastType.Danger, "Remove Collaborators", response.Message);

            if (response.NotFoundCollaborators.Any())
            {
                foreach (var collaboratorName in response.NotFoundCollaborators)
                {
                    ShowToast(ToastType.Danger, "Remove Collaborators", $"Collaborator '{collaboratorName}' was not found.");
                }
            }
        }
    }

    #region Modals, Dialogs and Toasts

    private async Task OnShowNewCollaboratorModalClick()
    {
        clearNewCollaboratorName();
        await modalNewCollaborator?.ShowAsync();
    }

    private async Task OnHideNewCollaboratorModalClick()
    {
        clearNewCollaboratorName();
        await modalNewCollaborator?.HideAsync();
    }

    private void clearNewCollaboratorName()
    {
        newCollaboratorName = "";
    }

    private async Task ShowConfirmationAsync()
    {
        string collaboratorNames = string.Join(", ", selectedCollaborators.Select(c => c.Name));
        string message = $"Colaboradores a eliminar: {collaboratorNames}";

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await removeCollaboratorsDialog.ShowAsync(
            title: "Confirma que quer eliminar?",
            message1: message,
            confirmDialogOptions: options);

        if (confirmation)
        {
            await RemoveCollaborators();
        }
    }

    private void ShowToast(ToastType toastType, string title, string message) => toastMessages.Add(CreateToastMessage(toastType, title, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string title, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = title,
            HelpText = $"{DateTime.Now}",
            Message = message,
        };

    #endregion


    #region Grid Functions

    private Task OnSelectedItemsChanged(HashSet<Collaborator> collaborators)
    {
        selectedCollaborators = collaborators is not null && collaborators.Any() ? collaborators : new();
        return Task.CompletedTask;
    }

    private async Task<IEnumerable<FilterOperatorInfo>> GridFiltersTranslationProvider()
    {
        var filtersTranslation = new List<FilterOperatorInfo>();

        // number/date/boolean
        filtersTranslation.Add(new("=", "Igual a", BlazorBootstrap.FilterOperator.Equals));
        filtersTranslation.Add(new("!=", "Diferente de", BlazorBootstrap.FilterOperator.NotEquals));
        // number/date
        filtersTranslation.Add(new("<", "Menor que", BlazorBootstrap.FilterOperator.LessThan));
        filtersTranslation.Add(new("<=", "Menor ou igual a", BlazorBootstrap.FilterOperator.LessThanOrEquals));
        filtersTranslation.Add(new(">", "Maior que", BlazorBootstrap.FilterOperator.GreaterThan));
        filtersTranslation.Add(new(">=", "Maior ou igual a", BlazorBootstrap.FilterOperator.GreaterThanOrEquals));
        // string
        filtersTranslation.Add(new("*a*", "Contém", BlazorBootstrap.FilterOperator.Contains));
        filtersTranslation.Add(new("*a*", "Não Contém", BlazorBootstrap.FilterOperator.DoesNotContain));
        filtersTranslation.Add(new("a**", "Começa com", BlazorBootstrap.FilterOperator.StartsWith));
        filtersTranslation.Add(new("**a", "Termina com", BlazorBootstrap.FilterOperator.EndsWith));
        filtersTranslation.Add(new("=", "Igual a", BlazorBootstrap.FilterOperator.Equals));
        // common
        filtersTranslation.Add(new("x", "Limpar", BlazorBootstrap.FilterOperator.Clear));

        return await Task.FromResult(filtersTranslation);
    }

    #endregion

    #region Scheduler Functions

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        // if (args.View.Text != "Year")
        // {
        //     Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
        //         new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        //     if (data != null)
        //     {
        //         appointments.Add(data);
        //         // Either call the Reload method or reassign the Data property of the Scheduler
        //         await scheduler.Reload();
        //     }
        // }
    }

    async Task OnMonthSelect(SchedulerMonthSelectEventArgs args)
    {
        await Task.CompletedTask;
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {

        //await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
    #endregion
}