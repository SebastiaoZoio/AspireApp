@page "/collaborators"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject Services.CollaboratorService CollaboratorService
@using Services.Models
@using Services.Requests


<div class="container-fluid">
    <div class="row">
        <div class="col-6">            
            <Card class="mt-4">
                <CardBody>                    
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <CardTitle>Colaboradores</CardTitle>
                        <div>
                            <Button Color="ButtonColor.Primary" @onclick="OnShowNewCollaboratorModalClick" Type="ButtonType.Link" Disabled="isLoading">Novo Colaborador</Button>
                            <Button Color="ButtonColor.Danger" @onclick="ShowConfirmationAsync" Type="ButtonType.Link" Disabled="selectedCollaborators.Count == 0">Eliminar</Button>
                        </div>                        
                    </div>
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center mt-4 mb-4">
                            <Spinner Type="SpinnerType.Border" />
                        </div>
                    }
                    <Grid TItem="Collaborator"
                          Class="table table-hover table-bordered table-striped"
                          DataProvider="ListCollaborators"
                          EmptyText="Não existem colaboradores"
                          FiltersTranslationProvider="GridFiltersTranslationProvider"
                          AllowFiltering="true"
                          AllowPaging="true"
                          AllowSorting="true"
                          AllowSelection="true"
                          SelectionMode="GridSelectionMode.Multiple"
                          SelectedItemsChanged="OnSelectedItemsChanged"
                          Responsive="true">

                        <GridColumn TItem="Collaborator" HeaderText="Nome" PropertyName="Name" SortString="Name" SortKeySelector="item => item.Name" FilterTextboxWidth="60">
                            @context.Name
                        </GridColumn>
                        <GridColumn TItem="Collaborator" HeaderText="Ativo" PropertyName="IsActive" Sortable="false" Filterable="false">
                            @context.IsActive
                        </GridColumn>
                    </Grid>
                </CardBody>
            </Card>
        </div>
    </div>
</div>


<Modal @ref="modalNewCollaborator" Title="Novo colaborador" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="mb-3">
            <label for="collaboratorName">Nome:</label>
            <InputText id="newCollaboratorName" @bind-Value="newCollaboratorName" placeholder="João Silva" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideNewCollaboratorModalClick">Cancelar</Button>
        <Button Color="ButtonColor.Primary">Guardar</Button>
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="dialog" />

@code {

    private bool isLoading = true;
    private Modal modalNewCollaborator = new();
    private string newCollaboratorName = "";
    private HashSet<Collaborator> selectedCollaborators = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCollaborators();
        isLoading = false;
    }

    private async Task LoadCollaborators()
    {
        await ListCollaborators(new GridDataProviderRequest<Collaborator>()
        {
            PageNumber = 1,
            PageSize = 10
        });
        StateHasChanged();
    }

    private async Task<GridDataProviderResult<Collaborator>> ListCollaborators(GridDataProviderRequest<Collaborator> request)
    {
        string sortString = "";
        SortDirection sortDirection = SortDirection.None;

        if (request.Sorting is not null && request.Sorting.Any())
        {
            // Note: Multi column sorting is not supported at this moment
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }

        var listCollaboratorsRequest = new ListCollaboratorsRequest()
        {
            Filters = request.Filters,
            PageNumber = request.PageNumber,
            PageSize = request.PageSize,
            SortString = sortString,
            SortDirection = sortDirection,
        };

        var result = await CollaboratorService.ListCollaboratorsAsync(listCollaboratorsRequest);
        return await Task.FromResult(new GridDataProviderResult<Collaborator> { Data = result.Item1, TotalCount = result.Item2 });
    }

    // private async Task AddCollaborator()
    // {
    //     var response = await CollaboratorService.AddCollaboratorAsync(newCollaborator);
    //     if (response.IsSuccessStatusCode)
    //     {
    //         collaborators.Add(newCollaborator); // Reload the list of employees
    //         newCollaborator = new Collaborator(); // Reset the new employee form

    //     }
    //     else
    //     {
    //         // Handle error
    //     }
    // }

    // private async Task RemoveEmployee(Guid collaboratorId)
    // {
    //     var response = await CollaboratorService.RemoveCollaboratorAsync(collaboratorId); 
    //     if (response.IsSuccessStatusCode)
    //     {
    //         collaborators.Remove(collaborators.FirstOrDefault(c => c.Id == collaboratorId));  // Reload the list of employees
    //     }
    //     else
    //     {
    //         // Handle error
    //     }
    // }

    private async Task OnShowNewCollaboratorModalClick()
    {
        await modalNewCollaborator?.ShowAsync();
    }

    private async Task OnHideNewCollaboratorModalClick()
    {
        await modalNewCollaborator?.HideAsync();
    }

    private ConfirmDialog dialog = default!;

    private async Task ShowConfirmationAsync()
    {
        string collaboratorNames = string.Join(", ", selectedCollaborators.Select(c => c.Name));
        string message = $"Colaboradores a eliminar: {collaboratorNames}";

        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Confirma que quer eliminar?",
            message1: message,
            confirmDialogOptions: options);

        if (confirmation)
        {
            // do something
        }
        else
        {
            // do something
        }
    }

    private Task OnSelectedItemsChanged(HashSet<Collaborator> collaborators)
    {
        selectedCollaborators = collaborators is not null && collaborators.Any() ? collaborators : new();
        return Task.CompletedTask;
    }

    private async Task<IEnumerable<FilterOperatorInfo>> GridFiltersTranslationProvider()
    {
        var filtersTranslation = new List<FilterOperatorInfo>();

        // number/date/boolean
        filtersTranslation.Add(new("=", "Igual a", FilterOperator.Equals));
        filtersTranslation.Add(new("!=", "Diferente de", FilterOperator.NotEquals));
        // number/date
        filtersTranslation.Add(new("<", "Menor que", FilterOperator.LessThan));
        filtersTranslation.Add(new("<=", "Menor ou igual a", FilterOperator.LessThanOrEquals));
        filtersTranslation.Add(new(">", "Maior que", FilterOperator.GreaterThan));
        filtersTranslation.Add(new(">=", "Maior ou igual a", FilterOperator.GreaterThanOrEquals));
        // string
        filtersTranslation.Add(new("*a*", "Contém", FilterOperator.Contains));
        filtersTranslation.Add(new("*a*", "Não Contém", FilterOperator.DoesNotContain));
        filtersTranslation.Add(new("a**", "Começa com", FilterOperator.StartsWith));
        filtersTranslation.Add(new("**a", "Termina com", FilterOperator.EndsWith));
        filtersTranslation.Add(new("=", "Igual a", FilterOperator.Equals));
        // common
        filtersTranslation.Add(new("x", "Limpar", FilterOperator.Clear));

        return await Task.FromResult(filtersTranslation);
    }

}