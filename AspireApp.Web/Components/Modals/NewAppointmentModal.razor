@using Services.Models
@using Services.Requests
@inject Services.CollaboratorService CollaboratorService


<Modal @ref="modalNewAppointment" Title="Nova Marcação" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="mb-3">
            <label for="collaboratorComboBox">Colaborador:</label>
            <BlazorBootstrap.AutoComplete @bind-Value="selectedCollaboratorName"
                                          DataProvider="CollaboratorsDataProvider"
                                          PropertyName="Name"
                                          Placeholder="Selecione um colaborador"
                                          OnChanged="(Collaborator collaborator) => OnAutoCompleteChanged(collaborator)" />
        </div>
        <div class="mb-3">
            <label for="appointmentDate">Data da Consulta:</label>
            <RadzenDatePicker id="appointmentDate"
                              @bind-Value="appointmentDate"
                              DateFormat="dd/MM/yyyy"
                              Placeholder="Selecione uma data"
                              Class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideNewAppointmentModalClick">Cancelar</Button>
@*         <Button Color="ButtonColor.Primary" Disabled="@IsFormInvalid" @onclick="AddAppointment">Agendar</Button>
 *@    </FooterTemplate>
</Modal>

@code {
    private Modal modalNewAppointment;
    private Collaborator selectedCollaborator;
    private string selectedCollaboratorName = string.Empty;
    private DateTime? appointmentDate;

    //[Parameter] public EventCallback<string, DateTime?> AddAppointment { get; set; }
    [Parameter] public List<string> collaborators { get; set; }

    public async Task OnShowNewAppointmentModalClick()
    {
        ClearForm();
        await modalNewAppointment?.ShowAsync();
    }

    public async Task OnHideNewAppointmentModalClick()
    {
        ClearForm();
        await modalNewAppointment?.HideAsync();
    }

    private void ClearForm()
    {
        selectedCollaborator = null;
        selectedCollaboratorName = string.Empty;
        appointmentDate = null;
    }

    private bool IsFormInvalid => string.IsNullOrEmpty(selectedCollaborator.Name) || !appointmentDate.HasValue;

    private async Task<AutoCompleteDataProviderResult<Collaborator>> CollaboratorsDataProvider(AutoCompleteDataProviderRequest<Collaborator> request)
    {
        var getCollaboratorsRequest = new GetCollaboratorsRequest()
            {
                Filter = request.Filter
            };
        var response = await CollaboratorService.ListCollaboratorsAsync(getCollaboratorsRequest);
        return await Task.FromResult(new AutoCompleteDataProviderResult<Collaborator> { Data = response.Item1, TotalCount = response.Item2 });
    }

    private void OnAutoCompleteChanged(Collaborator collaborator)
    {
        if (collaborator != null)
        {
            selectedCollaborator = collaborator;
            Console.WriteLine($"'{collaborator?.Name}' selected.");
        }        
    }
}
