@using Services.Models
@using Services.Requests
@inject Services.CollaboratorService CollaboratorService
@inject Services.AppointmentService AppointmentService


<Modal @ref="modalNewAppointment" Title="Nova Marcação" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="container">
            <div class="mb-3">
                <label for="collaboratorComboBox">Nome do Colaborador:</label>
                <BlazorBootstrap.AutoComplete @bind-Value="selectedCollaboratorName"
                                              DataProvider="CollaboratorsDataProvider"
                                              PropertyName="Name"
                                              Placeholder="João Silva"
                                              OnChanged="(Collaborator collaborator) => OnAutoCompleteChanged(collaborator)" 
                                              class="w-100" />
            </div>
            <div class="mb-3">
                <label for="AppointmentTypeDropdown">Tipo:</label>
                <RadzenDropDown @bind-Value=@selectedAppointmentTypeId
                                    Data=@appointmentTypes 
                                    TextProperty="@nameof(AppointmentType.Name)" 
                                    ValueProperty="Id" 
                                    AllowClear=true 
                                    Placeholder="Selecione o tipo de marcação" 
                                    Name="AppointmentTypeDropdown"
                                    class="w-100"/>
            </div>
            <div class="mb-3">
                <label for="BeginDate">Data de Início:</label>
                <RadzenLabel Component="RadzenBeginDatePickerChangeEvent" />
                <RadzenDatePicker TValue="DateTime?"
                                  DateFormat="dd/MM/yyyy"
                                  Value=@beginDate
                                  Change="@(args => beginDate = args)"
                                  Name="RadzenBeginDatePickerChangeEvent" 
                                  class="w-100" />
            </div>
            <div class="mb-3">
                <label for="EndDate">Data de Fim:</label>
                <RadzenLabel Component="RadzenEndDatePickerChangeEvent" />
                <RadzenDatePicker TValue="DateTime?"
                                  DateFormat="dd/MM/yyyy"
                                  Value=@endDate
                                  Min=@beginDate
                                  Change="@(args => endDate = args)"
                                  DateRender=@EndDateRender
                                  Name="RadzenEndDatePickerChangeEvent" 
                                  Disabled="beginDate == null"
                                  class="w-100" />
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideNewAppointmentModalClick">Cancelar</Button>
        <Button Color="ButtonColor.Primary" Disabled="@IsFormInvalid" @onclick="@AddAppointment">Agendar</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal modalNewAppointment;
    private IEnumerable<AppointmentType> appointmentTypes = new List<AppointmentType>();
    private int? selectedAppointmentTypeId;
    private Collaborator selectedCollaborator = new Collaborator();
    private string selectedCollaboratorName = string.Empty;
    private DateTime? beginDate;
    private DateTime? endDate;

    [Parameter] public EventCallback<(ToastType, string, string)> ShowToast { get; set; }

    protected override async Task OnInitializedAsync()
    {
        appointmentTypes = await AppointmentService.GetAppointmentTypes();
    }

    public async Task OnShowNewAppointmentModalClick()
    {
        ClearForm();
        await modalNewAppointment?.ShowAsync();
    }

    public async Task OnHideNewAppointmentModalClick()
    {
        ClearForm();
        await modalNewAppointment?.HideAsync();
    }

    public async Task AddAppointment()
    {
        var request = new NewAppointmentRequest()
            {
                CollaboratorId = selectedCollaborator.Id,
                AppointmentTypeId = selectedAppointmentTypeId.Value,
                BeginDate = beginDate.Value,
                EndDate = endDate.Value
            };
        var response = await AppointmentService.NewAppointmentAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await ShowToast.InvokeAsync((ToastType.Success, "Nova Marcação", "Novo marcação criada com sucesso!"));
            await OnHideNewAppointmentModalClick();
        }
        else
        {
            await ShowToast.InvokeAsync((ToastType.Danger, "Nova Marcação", "Erro a criar marcação."));
        }
    }

    private void ClearForm()
    {
        selectedCollaborator = null;
        selectedCollaboratorName = string.Empty;
        selectedAppointmentTypeId = null;
        beginDate = null;
        endDate = null;
    }

    private bool IsFormInvalid => selectedCollaborator == null || selectedAppointmentTypeId == null || !beginDate.HasValue || !endDate.HasValue;

    private async Task<AutoCompleteDataProviderResult<Collaborator>> CollaboratorsDataProvider(AutoCompleteDataProviderRequest<Collaborator> request)
    {
        var getCollaboratorsRequest = new GetCollaboratorsRequest()
            {
                Filter = request.Filter
            };
        var response = await CollaboratorService.ListCollaboratorsAsync(getCollaboratorsRequest);
        return await Task.FromResult(new AutoCompleteDataProviderResult<Collaborator> { Data = response.Item1, TotalCount = response.Item2 });
    }

    private void OnAutoCompleteChanged(Collaborator collaborator)
    {
        if (collaborator != null)
        {
            selectedCollaborator = collaborator;
            Console.WriteLine($"'{collaborator?.Name}' selected.");
        }        
    }

    private void EndDateRender(DateRenderEventArgs args)
    {        
        args.Disabled = args.Date < beginDate;

        if (args.Date == beginDate)
        {
            args.Attributes.Add("class", "highlight-begin-date");
            args.Attributes.Add("style", "color: black");
        }
    }

}
