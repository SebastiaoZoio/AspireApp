@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject Services.CollaboratorService CollaboratorService
@using Services.Models
@using Services.Requests

<Modal @ref="modalNewCollaborator" Title="Adicionar colaborador" IsVerticallyCentered="true">
    <BodyTemplate>
        <div class="mb-3">
            <label for="collaboratorName">Nome:</label>
            <input id="newCollaboratorName"
                       @bind="newCollaboratorName"
                       @bind:event="oninput"
                       @onkeyup="StateHasChanged"
                       placeholder="João Silva"
                       class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideNewCollaboratorModalClick">Cancelar</Button>
        <Button Color="ButtonColor.Primary" Disabled="string.IsNullOrEmpty(newCollaboratorName)" @onclick="AddCollaborator">Adicionar</Button>
    </FooterTemplate>
</Modal>


@code {
    private Modal modalNewCollaborator;
    public string newCollaboratorName;
    private bool isAddButtonDisabled = true;

    [Parameter] public EventCallback<(ToastType, string, string)> ShowToast { get; set; }
    [Parameter] public EventCallback LoadCollaborators { get; set; }
    [Parameter] public Grid<Collaborator>? collaboratorsGridRef { get; set; }    

    public async Task OnShowNewCollaboratorModalClick()
    {
        clearNewCollaboratorName();
        await modalNewCollaborator?.ShowAsync();
    }

    public async Task OnHideNewCollaboratorModalClick()
    {
        clearNewCollaboratorName();
        await modalNewCollaborator?.HideAsync();
    }

    private void clearNewCollaboratorName()
    {
        newCollaboratorName = "";
        isAddButtonDisabled = true;
    }

    private async Task AddCollaborator()
    {

        if (!string.IsNullOrWhiteSpace(newCollaboratorName))
        {
            var newCollaboratorRequest = new NewCollaboratorRequest()
                {
                    Name = newCollaboratorName
                };

            var response = await CollaboratorService.AddCollaboratorAsync(newCollaboratorRequest);
            if (response.IsSuccessStatusCode)
            {
                await ShowToast.InvokeAsync((ToastType.Success, "Novo Colaborador", "Novo colaborador adicionado com sucesso!"));
                await LoadCollaborators.InvokeAsync();
                await collaboratorsGridRef.RefreshDataAsync();
                await OnHideNewCollaboratorModalClick();
            }
            else
            {
                await ShowToast.InvokeAsync((ToastType.Danger, "Novo Colaborador", "Erro a adicionar novo colaborador"));
            }
        }
    }
}
